---
interface Props {
    title: string;
}

const { title } = Astro.props;

const id = Math.random().toString(36).substring(2, 9);
---

<div class="wrap-collabsible">
    <input id={`collapse-${id}`} class="toggle" type="checkbox" />
    <label for={`collapse-${id}`} class="label-toggle" tabindex="0">
        {title}
    </label>
    <div class="collapsible-content">
        <div class="content-inner">
            <slot />
        </div>
    </div>
</div>

<style>
    input[type="checkbox"] {
        display: none;
    }

    .label-toggle {
        display: flex;
        align-items: center;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        justify-content: space-between;
        border-bottom: 1px solid transparent;
        transition: border-bottom 0.3s;
        user-select: none;
    }

    .label-toggle:hover {
        border-bottom: 1px solid var(--hemo-color-primary);
    }

    .label-toggle::after {
        content: " ";
        display: inline-block;
        width: 0;
        height: 0;
        border-top: 6px solid transparent;
        border-bottom: 6px solid transparent;
        border-left: 6px solid var(--hemo-color-text-secondary);
        margin-left: 0.5rem;
        transition: transform 0.3s;
    }

    .wrap-collabsible {
        margin-bottom: 1rem;
    }

    .collapsible-content {
        max-height: 0px;
        overflow: hidden;
        user-select: none;

        transition: all 0.25s ease-in-out;
    }

    .toggle:checked + .label-toggle + .collapsible-content {
        max-height: 100vh;
        transform: translateY(10px);
    }

    .toggle:checked + .label-toggle::after {
        transform: rotate(90deg);
    }

    .collapsible-content .content-inner {
        color: var(--hemo-color-text-secondary);
        margin-bottom: 5px;
    }
</style>

<script>
    const allLabels = document.querySelectorAll(".label-toggle");

    allLabels.forEach((label) => {
        label.addEventListener("keydown", (e) => {
            const key = (e as KeyboardEvent).key;

            if (key === "Enter" || key === " ") {
                const input = label.previousElementSibling as HTMLInputElement;
                input.checked = !input.checked;
            }
        });
    });
</script>
