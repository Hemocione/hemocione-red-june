---
import { config } from "../utils/environment";
import barsSVG from "../assets/icons/bars.svg";
import barsDarkSVG from "../assets/icons/bars-dark.svg";
import logoSVG from "../assets/navbar_logo.svg";
import logoWhiteSVG from "../assets/logo_white.svg";

const currentPath = Astro.url.pathname;
---

<header id="navbar">
  <nav class="container">
    <img id="logo" src={logoSVG.src} alt="Hemocione" />
    <img id="logo-white" src={logoWhiteSVG.src} alt="Hemocione" />
    <input type="checkbox" id="hamburger-menu" hidden />
    <label for="hamburger-menu" class="hamburger-label">
      <img
        id="hamburger-menu-light"
        src={barsSVG.src}
        class="hamburger-menu"
        width="25"
        height="25"
        alt="Menu de navegação do site"
      />
      <img
        id="hamburger-menu-dark"
        src={barsDarkSVG.src}
        class="hamburger-menu"
        width="25"
        height="25"
        alt="Menu de navegação do site"
      />
      <div class="overlay"></div>
    </label>
    <div class="right-side">
      <ol class="nav-list">
        <li class={currentPath === "/" ? "active" : ""}>
          <a href="/">Home</a>
        </li>
        <li>
          <a href={config.hemocioneEvents} target="_blank">Eventos</a>
        </li>
        <li>
          <a href={config.hemocioneDonation} target="_blank">
            Irmãos de Sangue
          </a>
        </li>
        <li>
          <a href={config.hemocioneCompetitions} target="_blank"
            >Copas Hemocione</a
          >
        </li>
        <li>
          <a href={config.hemocioneStore} target="_blank"> Vestir a Camisa </a>
        </li>
        <li>
          <a href="https://ondedoar.hemocione.com.br" target="_blank"
            >Onde Doar</a
          >
        </li>
        <li class={currentPath === "/app" ? "active" : ""}>
          <a href="/app">App</a>
        </li>
      </ol>
      <button id="toggle-dark-mode" class="theme-toggler show-only-big">
        <span class="moon"></span>
        <span class="sun"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
        <span class="ray"></span>
      </button>
    </div>
  </nav>
</header>

<script>
  function initializeTheme() {
    const documentElement = document.documentElement;
    const toggleDarkMode = document.getElementById("toggle-dark-mode");
    const logo = document.getElementById("logo");
    const logoWhite = document.getElementById("logo-white");
    const hambugerMenuLight = document.getElementById("hamburger-menu-light");
    const hambugerMenuDark = document.getElementById("hamburger-menu-dark");

    function setTheme() {
      const theme = localStorage.getItem("theme") || "light";

      if (theme === "dark") {
        documentElement.classList.add("dark");
        toggleDarkMode?.classList.add("dark");
        logo?.classList.add("hidden");
        hambugerMenuLight?.classList.add("hidden");
        logoWhite?.classList.remove("hidden");
        hambugerMenuDark?.classList.remove("hidden");
      } else {
        documentElement.classList.remove("dark");
        toggleDarkMode?.classList.remove("dark");
        logo?.classList.remove("hidden");
        hambugerMenuLight?.classList.remove("hidden");
        logoWhite?.classList.add("hidden");
        hambugerMenuDark?.classList.add("hidden");
      }
    }

    function toggleTheme() {
      const currentTheme = localStorage.getItem("theme") || "light";
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      localStorage.setItem("theme", newTheme);
      setTheme();
    }

    // Set initial theme
    setTheme();
    // Add click listener to toggle button
    toggleDarkMode?.addEventListener("click", toggleTheme);

    // Observe DOM changes to handle dynamic content
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          const newToggleButton = document.getElementById("toggle-dark-mode");
          if (
            newToggleButton &&
            !newToggleButton.hasAttribute("data-initialized")
          ) {
            newToggleButton.setAttribute("data-initialized", "true");
            newToggleButton.addEventListener("click", toggleTheme);
            setTheme();
          }
        }
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });
  }

  // Re-initialize on Astro page transitions and on first page load
  document.addEventListener("astro:page-load", initializeTheme);
  document.addEventListener("astro:after-swap", initializeTheme);
</script>

<style>
  header {
    height: var(--navbar-height);
    box-shadow: 0 0 4px var(--hemo-color-text-secondary-opaque);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  nav {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    z-index: 5;
  }

  .right-side {
    display: flex;
    align-items: center;
    gap: 2rem;
    z-index: 2;
  }

  nav li a:hover,
  nav li a:focus {
    color: var(--hemo-color-primary);
  }

  .nav-list {
    list-style-type: none;
    display: inline-flex;
    gap: 2rem;
  }

  .nav-list .active {
    color: var(--hemo-color-primary);
    border-bottom: 2px solid var(--hemo-color-primary);
  }

  .nav-list li {
    display: flex;
    align-items: center;
  }

  .hamburger-menu {
    display: none;
  }
  .overlay {
    visibility: hidden;
    opacity: 0;
    position: fixed;
    top: 0;
    right: 0;
    height: 100dvh;
    width: 100vw;
    background-color: rgba(0, 0, 0, 0.4);
    z-index: 1;

    transition:
      visibility 0.3s,
      opacity 0.3s;
  }

  #hamburger-menu:checked ~ .right-side {
    right: 0;
    visibility: visible;
  }
  #hamburger-menu:checked ~ .right-side li a:hover {
    color: var(--hemo-color-text-primary);
  }

  #hamburger-menu:checked ~ .hamburger-label .overlay {
    visibility: visible;
    opacity: 1;
  }

  .theme-toggler {
    --color-secondary: var(--hemo-color-warn);

    all: unset;
    position: relative;
    height: 18px;
    width: 18px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s;
  }

  .theme-toggler.dark {
    --color-secondary: var(--hemo-color-mexican_chile);
  }

  .theme-toggler.dark .ray {
    opacity: 0;
  }

  .theme-toggler.dark .moon {
    transform: scale(1) translate(25%, -25%);
  }

  .theme-toggler .moon,
  .theme-toggler .sun {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: var(--color-secondary);
    border: 2px solid var(--hemo-color-background);
  }

  .theme-toggler .moon {
    background: var(--hemo-color-background);
    border-radius: 50%;
    transform: scale(0) translate(25%, -25%);
    z-index: 9;
    transition:
      0.4s transform,
      0.2s background;
    transform-origin: right;
  }

  .theme-toggler:hover {
    transform: scale(1.1);
  }

  .theme-toggler .ray {
    width: 2px;
    background: var(--color-secondary);
    display: block;
    height: 121%;
    position: absolute;
    z-index: -1;
    transition: 0.3s;
  }
  .theme-toggler .ray:nth-child(1) {
    transform: rotate(30deg);
  }
  .theme-toggler .ray:nth-child(2) {
    transform: rotate(60deg);
  }
  .theme-toggler .ray:nth-child(3) {
    transform: rotate(90deg);
  }
  .theme-toggler .ray:nth-child(4) {
    transform: rotate(120deg);
  }
  .theme-toggler .ray:nth-child(5) {
    transform: rotate(150deg);
  }
  .theme-toggler .ray:nth-child(6) {
    transform: rotate(180deg);
  }
  .theme-toggler .ray:nth-child(7) {
    transform: rotate(210deg);
  }
  .theme-toggler .ray:nth-child(8) {
    transform: rotate(240deg);
  }

  .hidden {
    display: none !important;
  }

  @media screen and (max-width: 768px) {
    .right-side {
      visibility: hidden;
      display: flex;
      flex-direction: column;
      position: fixed;
      top: 0;
      right: -50%;
      height: 100dvh;
      background-color: var(--hemo-color-background);
      padding: 2rem;
      gap: 2rem;
      margin: 0;

      transition:
        right 0.3s,
        visibility 0.3s;
    }

    .theme-toggler {
      position: absolute;
      top: 1rem;
      right: 1rem;
    }

    .nav-list {
      flex-direction: column;
      gap: 1rem;
      padding: 0;
    }

    .hamburger-menu {
      display: block;
    }
  }
</style>

<style is:global>
  .signin-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    border-radius: 100px !important;
  }

  @media screen and (max-width: 768px) {
    .signin-button-anchor,
    .signin-button {
      width: 100%;
    }
  }
</style>
